"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_logging_1 = require("aurelia-logging");
var overrideMarker = "$";
function isOverride(key) {
    var val = key.charAt(0) === overrideMarker;
    aurelia_logging_1.getLogger("aurelia-json-schema-form")
        .info("isOverride", { key: key, val: val });
    return val;
}
exports.isOverride = isOverride;
function setFormOverrides(form, parentSchema, formKey, schema) {
    aurelia_logging_1.getLogger("aurelia-json-schema-form")
        .info("setFormOverrides", { form: form, parentSchema: parentSchema, formKey: formKey, schema: schema });
    schema.title = schema.title || (!!formKey ? fromCamelCase(formKey) : undefined);
    form.$schema = schema;
    if (form.$enum) {
        form.$schema.enum = form.$enum;
    }
    if (parentSchema && parentSchema.type === "object") {
        form.$required = form.$required || (parentSchema.required
            ? parentSchema.required.indexOf(formKey) > -1 : false);
    }
}
exports.setFormOverrides = setFormOverrides;
function fromCamelCase(val) {
    return val
        .replace(/([A-Z])/g, " $1")
        .replace(/^./, function (str) { return str.toUpperCase(); });
}
var templateModuleMarker = "_element";
function isTemplateModule(key) {
    return key === templateModuleMarker;
}
exports.isTemplateModule = isTemplateModule;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVyZmFjZXMvZm9ybS1vdmVycmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLG1EQUE0QztBQThCNUMsSUFBTSxjQUFjLEdBQVcsR0FBRyxDQUFDO0FBQ25DLFNBQWdCLFVBQVUsQ0FBQyxHQUFXO0lBQ3BDLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssY0FBYyxDQUFDO0lBRTdDLDJCQUFTLENBQUMsMEJBQTBCLENBQUM7U0FDbEMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEdBQUcsS0FBQSxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQztJQUNwQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFORCxnQ0FNQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixJQUFtQixFQUFFLFlBQW1DLEVBQUUsT0FBZSxFQUFFLE1BQTZCO0lBRXhHLDJCQUFTLENBQUMsMEJBQTBCLENBQUM7U0FDbEMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsSUFBSSxNQUFBLEVBQUUsWUFBWSxjQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUNoQztJQUVELElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRO1lBQ3ZELENBQUMsQ0FBRSxZQUE0QyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNGO0FBQ0gsQ0FBQztBQWZELDRDQWVDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBVztJQUNoQyxPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztTQUMxQixPQUFPLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDL0MsQ0FBQztBQW1CRCxJQUFNLG9CQUFvQixHQUFXLFVBQVUsQ0FBQztBQUVoRCxTQUFnQixnQkFBZ0IsQ0FBQyxHQUFXO0lBQzFDLE9BQU8sR0FBRyxLQUFLLG9CQUFvQixDQUFDO0FBQ3RDLENBQUM7QUFGRCw0Q0FFQyIsImZpbGUiOiJpbnRlcmZhY2VzL2Zvcm0tb3ZlcnJpZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIElKc29uU2NoZW1hRGVmaW5pdGlvbixcclxuICBJSnNvblNjaGVtYU9iamVjdERlZmluaXRpb25cclxufSBmcm9tIFwiLi9qc29uLXNjaGVtYS1kZWZpbml0aW9uXCI7XHJcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCJhdXJlbGlhLWxvZ2dpbmdcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1PdmVycmlkZSB7XHJcbiAgW2tleTogc3RyaW5nXTogT1JUeXBlcztcclxuICBfZWxlbWVudD86IElUZW1wbGF0ZUVsZW1lbnRbXTtcclxuICAkbm9UaXRsZT86IGJvb2xlYW47XHJcbiAgJGFycmF5SXRlbT86IElGb3JtT3ZlcnJpZGU7XHJcbiAgJG5vRW1wdHlBcnJheUluaXRpYWxpemF0aW9uPzogYm9vbGVhbjtcclxuICAkbm90UmVtb3ZhYmxlPzogYm9vbGVhbjtcclxuICAkYXJyYXlBc1RhYnM/OiBib29sZWFuO1xyXG4gICR0YWJUaXRsZT86IHN0cmluZztcclxuICAkcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgJGh0bWxDbGFzcz86IHN0cmluZztcclxuICAkYWx0VGVtcGxhdGU/OiBzdHJpbmc7XHJcbiAgJG1pbkRhdGU/OiBzdHJpbmc7IC8vIHl5eXktTU0tZGRcclxuICAkbWF4RGF0ZT86IHN0cmluZzsgLy8geXl5eS1NTS1kZFxyXG4gICRzY2hlbWE/OiBJSnNvblNjaGVtYURlZmluaXRpb247XHJcbiAgJHJlcXVpcmVkPzogYm9vbGVhbjtcclxuICAkbm9TZXBhcmF0b3I/OiBib29sZWFuO1xyXG4gICRzdGVwPzogbnVtYmVyOyAvLyByYW5nZSBzbGlkZXIgc3RlcHNcclxuICAkcGFyZW50Rm9ybT86IElGb3JtT3ZlcnJpZGU7XHJcbiAgJGVudW0/OiBhbnk7XHJcbiAgJG9uQ2hhbmdlPzogT1JDaGFuZ2VDYWxsYmFjaztcclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBPUlR5cGVzID1cclxuICBJRm9ybU92ZXJyaWRlW10gfCBJRm9ybU92ZXJyaWRlIHwgT1JQcmltaXRpdmUgfCBJSnNvblNjaGVtYURlZmluaXRpb24gfCBJVGVtcGxhdGVFbGVtZW50W10gfCBPUkNoYW5nZUNhbGxiYWNrO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIE9SUHJpbWl0aXZlID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBPUkNoYW5nZUNhbGxiYWNrID0gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4gdm9pZDtcclxuXHJcbmNvbnN0IG92ZXJyaWRlTWFya2VyOiBzdHJpbmcgPSBcIiRcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzT3ZlcnJpZGUoa2V5OiBzdHJpbmcpIHtcclxuICBjb25zdCB2YWwgPSBrZXkuY2hhckF0KDApID09PSBvdmVycmlkZU1hcmtlcjtcclxuXHJcbiAgZ2V0TG9nZ2VyKFwiYXVyZWxpYS1qc29uLXNjaGVtYS1mb3JtXCIpXHJcbiAgICAuaW5mbyhcImlzT3ZlcnJpZGVcIiwgeyBrZXksIHZhbCB9KTtcclxuICByZXR1cm4gdmFsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0Rm9ybU92ZXJyaWRlcyhcclxuICBmb3JtOiBJRm9ybU92ZXJyaWRlLCBwYXJlbnRTY2hlbWE6IElKc29uU2NoZW1hRGVmaW5pdGlvbiwgZm9ybUtleTogc3RyaW5nLCBzY2hlbWE6IElKc29uU2NoZW1hRGVmaW5pdGlvblxyXG4pIHtcclxuICBnZXRMb2dnZXIoXCJhdXJlbGlhLWpzb24tc2NoZW1hLWZvcm1cIilcclxuICAgIC5pbmZvKFwic2V0Rm9ybU92ZXJyaWRlc1wiLCB7IGZvcm0sIHBhcmVudFNjaGVtYSwgZm9ybUtleSwgc2NoZW1hIH0pO1xyXG4gIHNjaGVtYS50aXRsZSA9IHNjaGVtYS50aXRsZSB8fCAoISFmb3JtS2V5ID8gZnJvbUNhbWVsQ2FzZShmb3JtS2V5KSA6IHVuZGVmaW5lZCk7XHJcbiAgZm9ybS4kc2NoZW1hID0gc2NoZW1hO1xyXG4gIGlmIChmb3JtLiRlbnVtKSB7XHJcbiAgICBmb3JtLiRzY2hlbWEuZW51bSA9IGZvcm0uJGVudW07XHJcbiAgfVxyXG5cclxuICBpZiAocGFyZW50U2NoZW1hICYmIHBhcmVudFNjaGVtYS50eXBlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICBmb3JtLiRyZXF1aXJlZCA9IGZvcm0uJHJlcXVpcmVkIHx8IChwYXJlbnRTY2hlbWEucmVxdWlyZWRcclxuICAgICAgPyAocGFyZW50U2NoZW1hIGFzIElKc29uU2NoZW1hT2JqZWN0RGVmaW5pdGlvbikucmVxdWlyZWQuaW5kZXhPZihmb3JtS2V5KSA+IC0xIDogZmFsc2UpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZnJvbUNhbWVsQ2FzZSh2YWw6IHN0cmluZykge1xyXG4gIHJldHVybiB2YWxcclxuICAgIC5yZXBsYWNlKC8oW0EtWl0pL2csIFwiICQxXCIpXHJcbiAgICAucmVwbGFjZSgvXi4vLCAoc3RyKSA9PiBzdHIudG9VcHBlckNhc2UoKSk7XHJcbn1cclxuXHJcbi8qKiBVc2VkIHRvIGRlY2xhcmUgYSBjb21wbGV0ZWx5IHNlcGFyYXRlIG1vZHVsZSB0aGF0IGRvZXNcclxuICogbm90IHBlcmZvcm0gc3RhbmRhcmQgdmFsaWRhdGlvbiwgaW1wbGVtZW50IHZpZXcvdmlldy1tb2RlbCBob3dldmVyIHlvdSB3YW50LlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGVtcGxhdGVFbGVtZW50IHtcclxuXHJcbiAgLyoqIEBwcm9wZXJ0eSB0aGUgZWxlbWVudCB0byBhcHBlbmQgdG8gdGVtcGxhdGUsIG1ha2Ugc3VyZSB5b3UgaGF2ZSBhZGRlZCBpdCdzIG1vZHVsZU5hbWUgdG8gZ2xvYmFsUmVzb3VyY2VzICovXHJcbiAgZWxlbWVudE5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqIHRoZSBzY2hlbWEncyBrZXkgdG8gcGFyc2UsIGJpbmRzIGZvcm0gKHRvLXZpZXcpIGFuZCBtb2RlbCh0d28td2F5KSB0byB5b3VyIG1vZHVsZVxyXG4gICAqIEBwcm9wZXJ0eSBJZiBzY2hlbWFLZXkgaXMgc3BlY2lmaWVkLCB5b3VyIG1vZHVsZSBtdXN0IGhhdmU6XHJcbiAgICogICBiaW5kYWJsZSBzY2hlbWE6IElKc29uU2NoZW1hRGVmaW5pdGlvbjtcclxuICAgKiAgIGJpbmRhYmxlIG1vZGVsOiBhbnkgb3IgbW9kZWwgdHlwZTtcclxuICAgKiAgIElmIHNjaGVtYUtleSBpcyBvbW1pdHRlZCwgbm8gYmluZGluZ3MgYXJlIG1hZGVcclxuICAgKi9cclxuICBzY2hlbWFLZXk/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IHRlbXBsYXRlTW9kdWxlTWFya2VyOiBzdHJpbmcgPSBcIl9lbGVtZW50XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZW1wbGF0ZU1vZHVsZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBrZXkgPT09IHRlbXBsYXRlTW9kdWxlTWFya2VyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290Ijoic3JjL3BsdWdpbiJ9
