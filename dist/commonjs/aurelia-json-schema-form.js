"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_rules_1 = require("./rules/common-rules");
exports.CommonRules = common_rules_1.CommonRules;
var number_rules_1 = require("./rules/number-rules");
exports.NumberRules = number_rules_1.NumberRules;
var array_rules_1 = require("./rules/array-rules");
exports.ArrayRules = array_rules_1.ArrayRules;
var string_rules_1 = require("./rules/string-rules");
exports.StringRules = string_rules_1.StringRules;
var form_instances_1 = require("./services/form-instances");
exports.FormInstances = form_instances_1.FormInstances;
require("./resources/number");
var bootstrap_validation_renderer_1 = require("./renderers/bootstrap-validation-renderer");
exports.BootstrapValidationRenderer = bootstrap_validation_renderer_1.BootstrapValidationRenderer;
var schema_form_configuration_1 = require("./services/schema-form-configuration");
var aurelia_framework_1 = require("aurelia-framework");
var aurelia_logging_1 = require("aurelia-logging");
var logger_1 = require("./resources/logger");
var index_1 = require("./templates/bootstrap4/index");
var au_json_schema_form_1 = require("./form/au-json-schema-form");
exports.AuJsonSchemaForm = au_json_schema_form_1.AuJsonSchemaForm;
var rules_factory_1 = require("./rules/rules-factory");
exports.RulesFactory = rules_factory_1.RulesFactory;
var PluginOptions = /** @class */ (function () {
    function PluginOptions() {
        /**
         * @property modifies DOM to display error/success states
         * @default BootstrapValidationRenderer "targets Bootstrap v4"
         */
        this.validationRenderer = new bootstrap_validation_renderer_1.BootstrapValidationRenderer();
        /**
         * @property global validation message overrides, choose which messages you want to override (default)
         * @default empty "use validator's default message"
         */
        this.validationMessages = {};
        /**
         * @property sets the log level (available values from LogManager.logLevel)
         * @default none "only initialization is logged"
         */
        this.logLevel = aurelia_framework_1.LogManager.logLevel.none;
        this.templates = index_1.GetBootstrapTemplates();
    }
    return PluginOptions;
}());
exports.PluginOptions = PluginOptions;
function configure(frameworkConfig, callback) {
    var logger = aurelia_logging_1.getLogger("aurelia-json-schema-form");
    logger.info("initializing aurelia-json-schema-form");
    // create defaults/apply user defined configuration
    var options = new PluginOptions();
    if (callback instanceof Function) {
        callback(options);
    }
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.container.get(rules_factory_1.RulesFactory).register();
    frameworkConfig.globalResources([
        aurelia_framework_1.PLATFORM.moduleName("./form/au-json-schema-form"),
        aurelia_framework_1.PLATFORM.moduleName("./value-converters/number-value-converter"),
        aurelia_framework_1.PLATFORM.moduleName("./form/array/sf-array"),
        aurelia_framework_1.PLATFORM.moduleName("./form/object/sf-object"),
        aurelia_framework_1.PLATFORM.moduleName("./form/number/sf-number"),
        aurelia_framework_1.PLATFORM.moduleName("./form/text/sf-string"),
        aurelia_framework_1.PLATFORM.moduleName("./form/boolean/sf-boolean"),
        aurelia_framework_1.PLATFORM.moduleName("./templates/bootstrap4/bootstrap-tooltip")
    ]);
}
exports.configure = configure;
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel);
    frameworkConfig.container.registerInstance(logger_1.SchemaFormLogger, logger);
    logger.info("registered logger");
}
function registerConfiguration(logger, options, frameworkConfig) {
    var configuration = new schema_form_configuration_1.SchemaFormConfiguration(options.validationRenderer, options.templates, options.validationMessages);
    frameworkConfig.container.registerInstance(schema_form_configuration_1.SchemaFormConfiguration, configuration);
    logger.info("registered configuration", configuration);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
