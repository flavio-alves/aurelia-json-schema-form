"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_logging_1 = require("aurelia-logging");
var rules_factory_1 = require("./rules/rules-factory");
var aurelia_pal_1 = require("aurelia-pal");
var logger_1 = require("./resources/logger");
var schema_form_configuration_1 = require("./services/schema-form-configuration");
var plugin_options_1 = require("./plugin-options");
function configure(frameworkConfig, callback) {
    var logger = aurelia_logging_1.getLogger('aurelia-json-schema-form');
    logger.info('initializing aurelia-json-schema-form');
    // create defaults/apply user defined configuration
    var options = new plugin_options_1.PluginOptions();
    if (callback instanceof Function) {
        callback(options);
    }
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.container.get(rules_factory_1.RulesFactory).register();
    frameworkConfig.globalResources([
        aurelia_pal_1.PLATFORM.moduleName('./form/au-json-schema-form'),
        aurelia_pal_1.PLATFORM.moduleName('./value-converters/sf-number-value-converter'),
        aurelia_pal_1.PLATFORM.moduleName('./form/array/sf-array'),
        aurelia_pal_1.PLATFORM.moduleName('./form/object/sf-object'),
        aurelia_pal_1.PLATFORM.moduleName('./form/number/sf-number'),
        aurelia_pal_1.PLATFORM.moduleName('./form/text/sf-string'),
        aurelia_pal_1.PLATFORM.moduleName('./form/boolean/sf-boolean'),
        aurelia_pal_1.PLATFORM.moduleName('./templates/bootstrap4/bootstrap-tooltip')
    ]);
}
exports.configure = configure;
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel);
    frameworkConfig.container.registerInstance(logger_1.SchemaFormLogger, logger);
    logger.info('registered logger');
}
function registerConfiguration(logger, options, frameworkConfig) {
    var configuration = new schema_form_configuration_1.SchemaFormConfiguration(options.validationRenderer, options.templates, options.validationMessages);
    frameworkConfig.container.registerInstance(schema_form_configuration_1.SchemaFormConfiguration, configuration);
    logger.info('registered configuration', configuration);
}
__export(require("./form/array/sf-array"));
__export(require("./form/au-json-schema-form"));
__export(require("./form/boolean/sf-boolean"));
__export(require("./form/form-controller"));
__export(require("./form/number/sf-number"));
__export(require("./form/object/sf-object"));
__export(require("./form/text/sf-string"));
__export(require("./interfaces/form-override"));
__export(require("./renderers/bootstrap-validation-renderer"));
__export(require("./resources/guid"));
__export(require("./resources/logger"));
__export(require("./resources/wrapper"));
__export(require("./rules/array-rules"));
__export(require("./rules/boolean-rules"));
__export(require("./rules/common-rules"));
__export(require("./rules/number-rules"));
__export(require("./rules/rules-factory"));
__export(require("./rules/string-rules"));
__export(require("./services/defaults-service"));
__export(require("./services/form-instances"));
__export(require("./services/form-service"));
__export(require("./services/schema-form-configuration"));
__export(require("./value-converters/sf-number-value-converter"));
__export(require("./plugin-options"));

//# sourceMappingURL=data:application/json;charset=utf8;base64,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OlsiaW1wb3J0IHsgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiB9IGZyb20gJ2F1cmVsaWEtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnYXVyZWxpYS1sb2dnaW5nJztcclxuaW1wb3J0IHsgUnVsZXNGYWN0b3J5IH0gZnJvbSAnLi9ydWxlcy9ydWxlcy1mYWN0b3J5JztcclxuaW1wb3J0IHsgUExBVEZPUk0gfSBmcm9tICdhdXJlbGlhLXBhbCc7XHJcbmltcG9ydCB7IFNjaGVtYUZvcm1Mb2dnZXIgfSBmcm9tICcuL3Jlc291cmNlcy9sb2dnZXInO1xyXG5pbXBvcnQgeyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vc2VydmljZXMvc2NoZW1hLWZvcm0tY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IFBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3BsdWdpbi1vcHRpb25zJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmUoZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uLCBjYWxsYmFjaz86IChjb25maWc6IFBsdWdpbk9wdGlvbnMpID0+IHZvaWQpIHtcclxuICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ2F1cmVsaWEtanNvbi1zY2hlbWEtZm9ybScpO1xyXG5cclxuICBsb2dnZXIuaW5mbygnaW5pdGlhbGl6aW5nIGF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybScpO1xyXG5cclxuICAvLyBjcmVhdGUgZGVmYXVsdHMvYXBwbHkgdXNlciBkZWZpbmVkIGNvbmZpZ3VyYXRpb25cclxuICBjb25zdCBvcHRpb25zID0gbmV3IFBsdWdpbk9wdGlvbnMoKTtcclxuICBpZiAoY2FsbGJhY2sgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgY2FsbGJhY2sob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICByZWdpc3RlckxvZ2dlcihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XHJcblxyXG4gIHJlZ2lzdGVyQ29uZmlndXJhdGlvbihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XHJcblxyXG4gIChmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLmdldChSdWxlc0ZhY3RvcnkpIGFzIFJ1bGVzRmFjdG9yeSkucmVnaXN0ZXIoKTtcclxuXHJcbiAgZnJhbWV3b3JrQ29uZmlnLmdsb2JhbFJlc291cmNlcyhbXHJcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybScpLFxyXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi92YWx1ZS1jb252ZXJ0ZXJzL3NmLW51bWJlci12YWx1ZS1jb252ZXJ0ZXInKSxcclxuXHJcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYXJyYXkvc2YtYXJyYXknKSxcclxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vZm9ybS9vYmplY3Qvc2Ytb2JqZWN0JyksXHJcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vbnVtYmVyL3NmLW51bWJlcicpLFxyXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi9mb3JtL3RleHQvc2Ytc3RyaW5nJyksXHJcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYm9vbGVhbi9zZi1ib29sZWFuJyksXHJcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL3RlbXBsYXRlcy9ib290c3RyYXA0L2Jvb3RzdHJhcC10b29sdGlwJylcclxuICBdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJMb2dnZXIoXHJcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxyXG4gIG9wdGlvbnM6IFBsdWdpbk9wdGlvbnMsXHJcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXHJcbikge1xyXG4gIGxvZ2dlci5zZXRMZXZlbChvcHRpb25zLmxvZ0xldmVsKTtcclxuXHJcbiAgZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKFNjaGVtYUZvcm1Mb2dnZXIsIGxvZ2dlcik7XHJcblxyXG4gIGxvZ2dlci5pbmZvKCdyZWdpc3RlcmVkIGxvZ2dlcicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3RlckNvbmZpZ3VyYXRpb24oXHJcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxyXG4gIG9wdGlvbnM6IFBsdWdpbk9wdGlvbnMsXHJcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXHJcbikge1xyXG4gIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBuZXcgU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24oXHJcbiAgICBvcHRpb25zLnZhbGlkYXRpb25SZW5kZXJlciwgb3B0aW9ucy50ZW1wbGF0ZXMsIG9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzKTtcclxuXHJcbiAgZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKFNjaGVtYUZvcm1Db25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgbG9nZ2VyLmluZm8oJ3JlZ2lzdGVyZWQgY29uZmlndXJhdGlvbicsIGNvbmZpZ3VyYXRpb24pO1xyXG59XHJcblxyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vYXJyYXkvc2YtYXJyYXknO1xyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS9ib29sZWFuL3NmLWJvb2xlYW4nO1xyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vZm9ybS1jb250cm9sbGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9mb3JtL251bWJlci9zZi1udW1iZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vb2JqZWN0L3NmLW9iamVjdCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS90ZXh0L3NmLXN0cmluZyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9mb3JtLWluc3RhbmNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL2Zvcm0tb3B0aW9ucyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9mb3JtLW92ZXJyaWRlJztcclxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL2pzb24tc2NoZW1hLWRlZmluaXRpb24nO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvcnVsZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvdGVtcGxhdGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvdGVtcGxhdGVzJztcclxuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL3ZhbGlkYXRpb24tbWVzc2FnZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3JlbmRlcmVycy9ib290c3RyYXAtdmFsaWRhdGlvbi1yZW5kZXJlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vcmVzb3VyY2VzL2d1aWQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3Jlc291cmNlcy9sb2dnZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL3Jlc291cmNlcy93cmFwcGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9ydWxlcy9hcnJheS1ydWxlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvYm9vbGVhbi1ydWxlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvY29tbW9uLXJ1bGVzJztcclxuZXhwb3J0ICogZnJvbSAnLi9ydWxlcy9udW1iZXItcnVsZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL3J1bGVzLWZhY3RvcnknO1xyXG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL3N0cmluZy1ydWxlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZXMvZGVmYXVsdHMtc2VydmljZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZXMvZm9ybS1pbnN0YW5jZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2VzL2Zvcm0tc2VydmljZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZXMvc2NoZW1hLWZvcm0tY29uZmlndXJhdGlvbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vdmFsdWUtY29udmVydGVycy9zZi1udW1iZXItdmFsdWUtY29udmVydGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9wbHVnaW4tb3B0aW9ucyc7XHJcbiJdLCJzb3VyY2VSb290Ijoic3JjL3BsdWdpbiJ9
