"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_logging_1 = require("aurelia-logging");
var rules_factory_1 = require("./rules/rules-factory");
var aurelia_pal_1 = require("aurelia-pal");
var logger_1 = require("./resources/logger");
var schema_form_configuration_1 = require("./services/schema-form-configuration");
var plugin_options_1 = require("./plugin-options");
function configure(frameworkConfig, callback) {
    var logger = aurelia_logging_1.getLogger('aurelia-json-schema-form');
    logger.info('initializing aurelia-json-schema-form');
    // create defaults/apply user defined configuration
    var options = new plugin_options_1.PluginOptions();
    if (callback instanceof Function) {
        callback(options);
    }
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.container.get(rules_factory_1.RulesFactory).register();
    frameworkConfig.globalResources([
        aurelia_pal_1.PLATFORM.moduleName('./form/au-json-schema-form'),
        aurelia_pal_1.PLATFORM.moduleName('./value-converters/sf-number-value-converter'),
        aurelia_pal_1.PLATFORM.moduleName('./form/array/sf-array'),
        aurelia_pal_1.PLATFORM.moduleName('./form/object/sf-object'),
        aurelia_pal_1.PLATFORM.moduleName('./form/number/sf-number'),
        aurelia_pal_1.PLATFORM.moduleName('./form/text/sf-string'),
        aurelia_pal_1.PLATFORM.moduleName('./form/boolean/sf-boolean'),
        aurelia_pal_1.PLATFORM.moduleName('./templates/bootstrap4/bootstrap-tooltip')
    ]);
}
exports.configure = configure;
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel);
    frameworkConfig.container.registerInstance(logger_1.SchemaFormLogger, logger);
    logger.info('registered logger');
}
function registerConfiguration(logger, options, frameworkConfig) {
    var configuration = new schema_form_configuration_1.SchemaFormConfiguration(options.validationRenderer, options.templates, options.validationMessages);
    frameworkConfig.container.registerInstance(schema_form_configuration_1.SchemaFormConfiguration, configuration);
    logger.info('registered configuration', configuration);
}
__export(require("./form/array/sf-array"));
__export(require("./form/au-json-schema-form"));
__export(require("./form/boolean/sf-boolean"));
__export(require("./form/form-controller"));
__export(require("./form/number/sf-number"));
__export(require("./form/object/sf-object"));
__export(require("./form/text/sf-string"));
__export(require("./interfaces/form-override"));
__export(require("./renderers/bootstrap-validation-renderer"));
__export(require("./resources/guid"));
__export(require("./resources/logger"));
__export(require("./resources/wrapper"));
__export(require("./rules/array-rules"));
__export(require("./rules/boolean-rules"));
__export(require("./rules/common-rules"));
__export(require("./rules/number-rules"));
__export(require("./rules/rules-factory"));
__export(require("./rules/string-rules"));
__export(require("./services/defaults-service"));
__export(require("./services/form-instances"));
__export(require("./services/form-service"));
__export(require("./services/schema-form-configuration"));
__export(require("./value-converters/sf-number-value-converter"));
__export(require("./plugin-options"));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsbURBQTRDO0FBQzVDLHVEQUFxRDtBQUNyRCwyQ0FBdUM7QUFDdkMsNkNBQXNEO0FBQ3RELGtGQUErRTtBQUMvRSxtREFBaUQ7QUFFakQsU0FBZ0IsU0FBUyxDQUFDLGVBQXVDLEVBQUUsUUFBMEM7SUFDM0csSUFBTSxNQUFNLEdBQUcsMkJBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBRXJELE1BQU0sQ0FBQyxJQUFJLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUVyRCxtREFBbUQ7SUFDbkQsSUFBTSxPQUFPLEdBQUcsSUFBSSw4QkFBYSxFQUFFLENBQUM7SUFDcEMsSUFBSSxRQUFRLFlBQVksUUFBUSxFQUFFO1FBQ2hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuQjtJQUVELGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRWpELHFCQUFxQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFdkQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsNEJBQVksQ0FBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV6RSxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQzlCLHNCQUFRLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDO1FBQ2pELHNCQUFRLENBQUMsVUFBVSxDQUFDLDhDQUE4QyxDQUFDO1FBRW5FLHNCQUFRLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDO1FBQzVDLHNCQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1FBQzlDLHNCQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1FBQzlDLHNCQUFRLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDO1FBQzVDLHNCQUFRLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDO1FBQ2hELHNCQUFRLENBQUMsVUFBVSxDQUFDLDBDQUEwQyxDQUFDO0tBQ2hFLENBQUMsQ0FBQztBQUNMLENBQUM7QUE1QkQsOEJBNEJDO0FBRUQsU0FBUyxjQUFjLENBQ3JCLE1BQXdCLEVBQ3hCLE9BQXNCLEVBQ3RCLGVBQXVDO0lBRXZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWxDLGVBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMseUJBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFckUsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUM1QixNQUF3QixFQUN4QixPQUFzQixFQUN0QixlQUF1QztJQUV2QyxJQUFNLGFBQWEsR0FBRyxJQUFJLG1EQUF1QixDQUMvQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUU3RSxlQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLG1EQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRW5GLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELDJDQUFzQztBQUN0QyxnREFBMkM7QUFDM0MsK0NBQTBDO0FBQzFDLDRDQUF1QztBQUN2Qyw2Q0FBd0M7QUFDeEMsNkNBQXdDO0FBQ3hDLDJDQUFzQztBQUd0QyxnREFBMkM7QUFNM0MsK0RBQTBEO0FBQzFELHNDQUFpQztBQUNqQyx3Q0FBbUM7QUFDbkMseUNBQW9DO0FBQ3BDLHlDQUFvQztBQUNwQywyQ0FBc0M7QUFDdEMsMENBQXFDO0FBQ3JDLDBDQUFxQztBQUNyQywyQ0FBc0M7QUFDdEMsMENBQXFDO0FBQ3JDLGlEQUE0QztBQUM1QywrQ0FBMEM7QUFDMUMsNkNBQXdDO0FBQ3hDLDBEQUFxRDtBQUNyRCxrRUFBNkQ7QUFDN0Qsc0NBQWlDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiB9IGZyb20gJ2F1cmVsaWEtZnJhbWV3b3JrJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2F1cmVsaWEtbG9nZ2luZyc7XG5pbXBvcnQgeyBSdWxlc0ZhY3RvcnkgfSBmcm9tICcuL3J1bGVzL3J1bGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgUExBVEZPUk0gfSBmcm9tICdhdXJlbGlhLXBhbCc7XG5pbXBvcnQgeyBTY2hlbWFGb3JtTG9nZ2VyIH0gZnJvbSAnLi9yZXNvdXJjZXMvbG9nZ2VyJztcbmltcG9ydCB7IFNjaGVtYUZvcm1Db25maWd1cmF0aW9uIH0gZnJvbSAnLi9zZXJ2aWNlcy9zY2hlbWEtZm9ybS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IFBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3BsdWdpbi1vcHRpb25zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZShmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24sIGNhbGxiYWNrPzogKGNvbmZpZzogUGx1Z2luT3B0aW9ucykgPT4gdm9pZCkge1xuICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ2F1cmVsaWEtanNvbi1zY2hlbWEtZm9ybScpO1xuXG4gIGxvZ2dlci5pbmZvKCdpbml0aWFsaXppbmcgYXVyZWxpYS1qc29uLXNjaGVtYS1mb3JtJyk7XG5cbiAgLy8gY3JlYXRlIGRlZmF1bHRzL2FwcGx5IHVzZXIgZGVmaW5lZCBjb25maWd1cmF0aW9uXG4gIGNvbnN0IG9wdGlvbnMgPSBuZXcgUGx1Z2luT3B0aW9ucygpO1xuICBpZiAoY2FsbGJhY2sgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIGNhbGxiYWNrKG9wdGlvbnMpO1xuICB9XG5cbiAgcmVnaXN0ZXJMb2dnZXIobG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuXG4gIHJlZ2lzdGVyQ29uZmlndXJhdGlvbihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XG5cbiAgKGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIuZ2V0KFJ1bGVzRmFjdG9yeSkgYXMgUnVsZXNGYWN0b3J5KS5yZWdpc3RlcigpO1xuXG4gIGZyYW1ld29ya0NvbmZpZy5nbG9iYWxSZXNvdXJjZXMoW1xuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vZm9ybS9hdS1qc29uLXNjaGVtYS1mb3JtJyksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi92YWx1ZS1jb252ZXJ0ZXJzL3NmLW51bWJlci12YWx1ZS1jb252ZXJ0ZXInKSxcblxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vZm9ybS9hcnJheS9zZi1hcnJheScpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vZm9ybS9vYmplY3Qvc2Ytb2JqZWN0JyksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi9mb3JtL251bWJlci9zZi1udW1iZXInKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vdGV4dC9zZi1zdHJpbmcnKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYm9vbGVhbi9zZi1ib29sZWFuJyksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi90ZW1wbGF0ZXMvYm9vdHN0cmFwNC9ib290c3RyYXAtdG9vbHRpcCcpXG4gIF0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckxvZ2dlcihcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxuICBvcHRpb25zOiBQbHVnaW5PcHRpb25zLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBsb2dnZXIuc2V0TGV2ZWwob3B0aW9ucy5sb2dMZXZlbCk7XG5cbiAgZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKFNjaGVtYUZvcm1Mb2dnZXIsIGxvZ2dlcik7XG5cbiAgbG9nZ2VyLmluZm8oJ3JlZ2lzdGVyZWQgbG9nZ2VyJyk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQ29uZmlndXJhdGlvbihcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxuICBvcHRpb25zOiBQbHVnaW5PcHRpb25zLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0gbmV3IFNjaGVtYUZvcm1Db25maWd1cmF0aW9uKFxuICAgIG9wdGlvbnMudmFsaWRhdGlvblJlbmRlcmVyLCBvcHRpb25zLnRlbXBsYXRlcywgb3B0aW9ucy52YWxpZGF0aW9uTWVzc2FnZXMpO1xuXG4gIGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiwgY29uZmlndXJhdGlvbik7XG5cbiAgbG9nZ2VyLmluZm8oJ3JlZ2lzdGVyZWQgY29uZmlndXJhdGlvbicsIGNvbmZpZ3VyYXRpb24pO1xufVxuXG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vYXJyYXkvc2YtYXJyYXknO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtL2F1LWpzb24tc2NoZW1hLWZvcm0nO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtL2Jvb2xlYW4vc2YtYm9vbGVhbic7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vZm9ybS1jb250cm9sbGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS9udW1iZXIvc2YtbnVtYmVyJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS9vYmplY3Qvc2Ytb2JqZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS90ZXh0L3NmLXN0cmluZyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvZm9ybS1pbnN0YW5jZSc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvZm9ybS1vcHRpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9mb3JtLW92ZXJyaWRlJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9qc29uLXNjaGVtYS1kZWZpbml0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy9ydWxlcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvdGVtcGxhdGUnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL3RlbXBsYXRlcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvdmFsaWRhdGlvbi1tZXNzYWdlcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlbmRlcmVycy9ib290c3RyYXAtdmFsaWRhdGlvbi1yZW5kZXJlcic7XG5leHBvcnQgKiBmcm9tICcuL3Jlc291cmNlcy9ndWlkJztcbmV4cG9ydCAqIGZyb20gJy4vcmVzb3VyY2VzL2xvZ2dlcic7XG5leHBvcnQgKiBmcm9tICcuL3Jlc291cmNlcy93cmFwcGVyJztcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvYXJyYXktcnVsZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9ydWxlcy9ib29sZWFuLXJ1bGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvY29tbW9uLXJ1bGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvbnVtYmVyLXJ1bGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvcnVsZXMtZmFjdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL3N0cmluZy1ydWxlcyc7XG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2VzL2RlZmF1bHRzLXNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy9mb3JtLWluc3RhbmNlcyc7XG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2VzL2Zvcm0tc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2VzL3NjaGVtYS1mb3JtLWNvbmZpZ3VyYXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi92YWx1ZS1jb252ZXJ0ZXJzL3NmLW51bWJlci12YWx1ZS1jb252ZXJ0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9wbHVnaW4tb3B0aW9ucyc7XG4iXSwic291cmNlUm9vdCI6InNyYy9wbHVnaW4ifQ==
