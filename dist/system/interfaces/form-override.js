System.register(["aurelia-logging"], function (exports_1, context_1) {
    "use strict";
    var aurelia_logging_1, overrideMarker, templateModuleMarker;
    var __moduleName = context_1 && context_1.id;
    function isOverride(key) {
        var val = key.charAt(0) === overrideMarker;
        aurelia_logging_1.getLogger('aurelia-json-schema-form')
            .info('isOverride', { key: key, val: val });
        return val;
    }
    exports_1("isOverride", isOverride);
    function setFormOverrides(form, parentSchema, formKey, schema) {
        aurelia_logging_1.getLogger('aurelia-json-schema-form')
            .info('setFormOverrides', { form: form, parentSchema: parentSchema, formKey: formKey, schema: schema });
        schema.title = schema.title || (!!formKey ? fromCamelCase(formKey) : undefined);
        form.$schema = schema;
        if (form.$enum) {
            form.$schema.enum = form.$enum;
        }
        if (parentSchema && parentSchema.type === 'object') {
            form.$required = form.$required || (parentSchema.required
                ? parentSchema.required.indexOf(formKey) > -1 : false);
        }
    }
    exports_1("setFormOverrides", setFormOverrides);
    function fromCamelCase(val) {
        return val
            .replace(/([A-Z])/g, ' $1')
            .replace(/^./, function (str) { return str.toUpperCase(); });
    }
    function isTemplateModule(key) {
        return key === templateModuleMarker;
    }
    exports_1("isTemplateModule", isTemplateModule);
    return {
        setters: [
            function (aurelia_logging_1_1) {
                aurelia_logging_1 = aurelia_logging_1_1;
            }
        ],
        execute: function () {
            overrideMarker = '$';
            templateModuleMarker = '_element';
        }
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVyZmFjZXMvZm9ybS1vdmVycmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBbUNBLFNBQWdCLFVBQVUsQ0FBQyxHQUFXO1FBQ3BDLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssY0FBYyxDQUFDO1FBRTdDLDJCQUFTLENBQUMsMEJBQTBCLENBQUM7YUFDbEMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEdBQUcsS0FBQSxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7O0lBRUQsU0FBZ0IsZ0JBQWdCLENBQzlCLElBQW1CLEVBQUUsWUFBbUMsRUFBRSxPQUFlLEVBQUUsTUFBNkI7UUFFeEcsMkJBQVMsQ0FBQywwQkFBMEIsQ0FBQzthQUNsQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxZQUFZLGNBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7Z0JBQ3ZELENBQUMsQ0FBRSxZQUE0QyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNGO0lBQ0gsQ0FBQzs7SUFFRCxTQUFTLGFBQWEsQ0FBQyxHQUFXO1FBQ2hDLE9BQU8sR0FBRzthQUNQLE9BQU8sQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDO2FBQzFCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBcUJELFNBQWdCLGdCQUFnQixDQUFDLEdBQVc7UUFDMUMsT0FBTyxHQUFHLEtBQUssb0JBQW9CLENBQUM7SUFDdEMsQ0FBQzs7Ozs7Ozs7O1lBckRLLGNBQWMsR0FBVyxHQUFHLENBQUM7WUFpRDdCLG9CQUFvQixHQUFXLFVBQVUsQ0FBQztRQUtoRCxDQUFDIiwiZmlsZSI6ImludGVyZmFjZXMvZm9ybS1vdmVycmlkZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgSUpzb25TY2hlbWFEZWZpbml0aW9uLFxyXG4gIElKc29uU2NoZW1hT2JqZWN0RGVmaW5pdGlvblxyXG59IGZyb20gJy4vanNvbi1zY2hlbWEtZGVmaW5pdGlvbic7XHJcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2F1cmVsaWEtbG9nZ2luZyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtT3ZlcnJpZGUge1xyXG4gIFtrZXk6IHN0cmluZ106IE9SVHlwZXM7XHJcbiAgX2VsZW1lbnQ/OiBJVGVtcGxhdGVFbGVtZW50W107XHJcbiAgJG5vVGl0bGU/OiBib29sZWFuO1xyXG4gICRhcnJheUl0ZW0/OiBJRm9ybU92ZXJyaWRlO1xyXG4gICRub0VtcHR5QXJyYXlJbml0aWFsaXphdGlvbj86IGJvb2xlYW47XHJcbiAgJG5vdFJlbW92YWJsZT86IGJvb2xlYW47XHJcbiAgJGFycmF5QXNUYWJzPzogYm9vbGVhbjtcclxuICAkdGFiVGl0bGU/OiBzdHJpbmc7XHJcbiAgJHBsYWNlaG9sZGVyPzogc3RyaW5nO1xyXG4gICRodG1sQ2xhc3M/OiBzdHJpbmc7XHJcbiAgJGFsdFRlbXBsYXRlPzogc3RyaW5nO1xyXG4gICRtaW5EYXRlPzogc3RyaW5nOyAvLyB5eXl5LU1NLWRkXHJcbiAgJG1heERhdGU/OiBzdHJpbmc7IC8vIHl5eXktTU0tZGRcclxuICAkc2NoZW1hPzogSUpzb25TY2hlbWFEZWZpbml0aW9uO1xyXG4gICRyZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgJG5vU2VwYXJhdG9yPzogYm9vbGVhbjtcclxuICAkc3RlcD86IG51bWJlcjsgLy8gcmFuZ2Ugc2xpZGVyIHN0ZXBzXHJcbiAgJHBhcmVudEZvcm0/OiBJRm9ybU92ZXJyaWRlO1xyXG4gICRlbnVtPzogYW55O1xyXG4gICRvbkNoYW5nZT86IE9SQ2hhbmdlQ2FsbGJhY2s7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT1JUeXBlcyA9XHJcbiAgSUZvcm1PdmVycmlkZVtdIHwgSUZvcm1PdmVycmlkZSB8IE9SUHJpbWl0aXZlIHwgSUpzb25TY2hlbWFEZWZpbml0aW9uIHwgSVRlbXBsYXRlRWxlbWVudFtdIHwgT1JDaGFuZ2VDYWxsYmFjaztcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBPUlByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT1JDaGFuZ2VDYWxsYmFjayA9IChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHZvaWQ7XHJcblxyXG5jb25zdCBvdmVycmlkZU1hcmtlcjogc3RyaW5nID0gJyQnO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNPdmVycmlkZShrZXk6IHN0cmluZykge1xyXG4gIGNvbnN0IHZhbCA9IGtleS5jaGFyQXQoMCkgPT09IG92ZXJyaWRlTWFya2VyO1xyXG5cclxuICBnZXRMb2dnZXIoJ2F1cmVsaWEtanNvbi1zY2hlbWEtZm9ybScpXHJcbiAgICAuaW5mbygnaXNPdmVycmlkZScsIHsga2V5LCB2YWwgfSk7XHJcbiAgcmV0dXJuIHZhbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZvcm1PdmVycmlkZXMoXHJcbiAgZm9ybTogSUZvcm1PdmVycmlkZSwgcGFyZW50U2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb24sIGZvcm1LZXk6IHN0cmluZywgc2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb25cclxuKSB7XHJcbiAgZ2V0TG9nZ2VyKCdhdXJlbGlhLWpzb24tc2NoZW1hLWZvcm0nKVxyXG4gICAgLmluZm8oJ3NldEZvcm1PdmVycmlkZXMnLCB7IGZvcm0sIHBhcmVudFNjaGVtYSwgZm9ybUtleSwgc2NoZW1hIH0pO1xyXG4gIHNjaGVtYS50aXRsZSA9IHNjaGVtYS50aXRsZSB8fCAoISFmb3JtS2V5ID8gZnJvbUNhbWVsQ2FzZShmb3JtS2V5KSA6IHVuZGVmaW5lZCk7XHJcbiAgZm9ybS4kc2NoZW1hID0gc2NoZW1hO1xyXG4gIGlmIChmb3JtLiRlbnVtKSB7XHJcbiAgICBmb3JtLiRzY2hlbWEuZW51bSA9IGZvcm0uJGVudW07XHJcbiAgfVxyXG5cclxuICBpZiAocGFyZW50U2NoZW1hICYmIHBhcmVudFNjaGVtYS50eXBlID09PSAnb2JqZWN0Jykge1xyXG4gICAgZm9ybS4kcmVxdWlyZWQgPSBmb3JtLiRyZXF1aXJlZCB8fCAocGFyZW50U2NoZW1hLnJlcXVpcmVkXHJcbiAgICAgID8gKHBhcmVudFNjaGVtYSBhcyBJSnNvblNjaGVtYU9iamVjdERlZmluaXRpb24pLnJlcXVpcmVkLmluZGV4T2YoZm9ybUtleSkgPiAtMSA6IGZhbHNlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb21DYW1lbENhc2UodmFsOiBzdHJpbmcpIHtcclxuICByZXR1cm4gdmFsXHJcbiAgICAucmVwbGFjZSgvKFtBLVpdKS9nLCAnICQxJylcclxuICAgIC5yZXBsYWNlKC9eLi8sIChzdHIpID0+IHN0ci50b1VwcGVyQ2FzZSgpKTtcclxufVxyXG5cclxuLyoqIFVzZWQgdG8gZGVjbGFyZSBhIGNvbXBsZXRlbHkgc2VwYXJhdGUgbW9kdWxlIHRoYXQgZG9lc1xyXG4gKiBub3QgcGVyZm9ybSBzdGFuZGFyZCB2YWxpZGF0aW9uLCBpbXBsZW1lbnQgdmlldy92aWV3LW1vZGVsIGhvd2V2ZXIgeW91IHdhbnQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElUZW1wbGF0ZUVsZW1lbnQge1xyXG5cclxuICAvKiogQHByb3BlcnR5IHRoZSBlbGVtZW50IHRvIGFwcGVuZCB0byB0ZW1wbGF0ZSwgbWFrZSBzdXJlIHlvdSBoYXZlIGFkZGVkIGl0J3MgbW9kdWxlTmFtZSB0byBnbG9iYWxSZXNvdXJjZXMgKi9cclxuICBlbGVtZW50TmFtZTogc3RyaW5nO1xyXG5cclxuICAvKiogdGhlIHNjaGVtYSdzIGtleSB0byBwYXJzZSwgYmluZHMgZm9ybSAodG8tdmlldykgYW5kIG1vZGVsKHR3by13YXkpIHRvIHlvdXIgbW9kdWxlXHJcbiAgICogQHByb3BlcnR5IElmIHNjaGVtYUtleSBpcyBzcGVjaWZpZWQsIHlvdXIgbW9kdWxlIG11c3QgaGF2ZTpcclxuICAgKiAgIGJpbmRhYmxlIHNjaGVtYTogSUpzb25TY2hlbWFEZWZpbml0aW9uO1xyXG4gICAqICAgYmluZGFibGUgbW9kZWw6IGFueSBvciBtb2RlbCB0eXBlO1xyXG4gICAqICAgSWYgc2NoZW1hS2V5IGlzIG9tbWl0dGVkLCBubyBiaW5kaW5ncyBhcmUgbWFkZVxyXG4gICAqL1xyXG4gIHNjaGVtYUtleT86IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgdGVtcGxhdGVNb2R1bGVNYXJrZXI6IHN0cmluZyA9ICdfZWxlbWVudCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZW1wbGF0ZU1vZHVsZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBrZXkgPT09IHRlbXBsYXRlTW9kdWxlTWFya2VyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290Ijoic3JjL3BsdWdpbiJ9
