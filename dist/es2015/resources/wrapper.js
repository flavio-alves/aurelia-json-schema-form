export class Wrapper {
    constructor(key) {
        const matches = key.match(Wrapper.emmetRegex);
        if (this.validateMatches(matches, key)) {
            const attr = this.getEmmetAttr(matches[1], matches[2], matches[3]);
            this.start = `<${attr.element} ${attr.id} ${attr.classes}>`.replace(/\s+/, " ").trim();
            this.end = this.isVoidElement(attr.element) ? "" : `</${attr.element}>`;
        }
    }
    static isContainer(key) {
        return key.charAt(0) === this.containerMarker;
    }
    isVoidElement(element) {
        return Wrapper.voidElements.indexOf(element) > -1;
    }
    validateMatches(matches, key) {
        if (!matches && Wrapper.isContainer(key)) {
            throw new Error(`the form key "${key}" does not match "^(@element)(#id)?((.class)+)?$"`);
        }
        return !!matches;
    }
    getEmmetAttr(element, id, classes) {
        return {
            element,
            id: id ? `id="${id}"` : "",
            classes: classes ? `class="${classes.split(".").join(" ").trim()}"` : ""
        };
    }
    applyEnd(template) {
        if (this.end) {
            template.content += this.end;
        }
    }
    applyStart(template) {
        if (this.start) {
            template.content += this.start;
        }
    }
}
Wrapper.containerMarker = "@";
Wrapper.emmetRegex = /^@([a-z-]+)(?:(?:(?:#(\w+))?)(?:((?:\.(?:[a-z\d-]+))+)?))$/;
Wrapper.voidElements = [
    "area",
    "base",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,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dXJjZXMvd3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUZW1wbGF0ZVN0b3JlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvdGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBXcmFwcGVyIHtcclxuICBzdGF0aWMgcmVhZG9ubHkgY29udGFpbmVyTWFya2VyID0gXCJAXCI7XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBlbW1ldFJlZ2V4ID0gL15AKFthLXotXSspKD86KD86KD86IyhcXHcrKSk/KSg/OigoPzpcXC4oPzpbYS16XFxkLV0rKSkrKT8pKSQvO1xyXG5cclxuICBzdGF0aWMgcmVhZG9ubHkgdm9pZEVsZW1lbnRzID0gW1xyXG4gICAgXCJhcmVhXCIsXHJcbiAgICBcImJhc2VcIixcclxuICAgIFwiYnJcIixcclxuICAgIFwiY29sXCIsXHJcbiAgICBcImVtYmVkXCIsXHJcbiAgICBcImhyXCIsXHJcbiAgICBcImltZ1wiLFxyXG4gICAgXCJpbnB1dFwiLFxyXG4gICAgXCJsaW5rXCIsXHJcbiAgICBcIm1ldGFcIixcclxuICAgIFwicGFyYW1cIixcclxuICAgIFwic291cmNlXCIsXHJcbiAgICBcInRyYWNrXCIsXHJcbiAgICBcIndiclwiXHJcbiAgXTtcclxuXHJcbiAgc3RhdGljIGlzQ29udGFpbmVyKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4ga2V5LmNoYXJBdCgwKSA9PT0gdGhpcy5jb250YWluZXJNYXJrZXI7XHJcbiAgfVxyXG5cclxuICBzdGFydD86IHN0cmluZztcclxuICBlbmQ/OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGtleTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBtYXRjaGVzID0ga2V5Lm1hdGNoKFdyYXBwZXIuZW1tZXRSZWdleCk7XHJcblxyXG4gICAgaWYgKHRoaXMudmFsaWRhdGVNYXRjaGVzKG1hdGNoZXMsIGtleSkpIHtcclxuICAgICAgY29uc3QgYXR0ciA9IHRoaXMuZ2V0RW1tZXRBdHRyKG1hdGNoZXNbMV0sIG1hdGNoZXNbMl0sIG1hdGNoZXNbM10pO1xyXG4gICAgICB0aGlzLnN0YXJ0ID0gYDwke2F0dHIuZWxlbWVudH0gJHthdHRyLmlkfSAke2F0dHIuY2xhc3Nlc30+YC5yZXBsYWNlKC9cXHMrLywgXCIgXCIpLnRyaW0oKTtcclxuICAgICAgdGhpcy5lbmQgPSB0aGlzLmlzVm9pZEVsZW1lbnQoYXR0ci5lbGVtZW50KSA/IFwiXCIgOiBgPC8ke2F0dHIuZWxlbWVudH0+YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNWb2lkRWxlbWVudChlbGVtZW50OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBXcmFwcGVyLnZvaWRFbGVtZW50cy5pbmRleE9mKGVsZW1lbnQpID4gLTE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlTWF0Y2hlcyhtYXRjaGVzOiBSZWdFeHBNYXRjaEFycmF5LCBrZXk6IHN0cmluZykge1xyXG4gICAgaWYgKCFtYXRjaGVzICYmIFdyYXBwZXIuaXNDb250YWluZXIoa2V5KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoZSBmb3JtIGtleSBcIiR7a2V5fVwiIGRvZXMgbm90IG1hdGNoIFwiXihAZWxlbWVudCkoI2lkKT8oKC5jbGFzcykrKT8kXCJgKTtcclxuICAgIH1cclxuICAgIHJldHVybiAhIW1hdGNoZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEVtbWV0QXR0cihcclxuICAgIGVsZW1lbnQsIGlkLCBjbGFzc2VzXHJcbiAgKTogeyBlbGVtZW50OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNsYXNzZXM6IHN0cmluZyB9IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVsZW1lbnQsXHJcbiAgICAgIGlkOiBpZCA/IGBpZD1cIiR7aWR9XCJgIDogXCJcIixcclxuICAgICAgY2xhc3NlczogY2xhc3NlcyA/IGBjbGFzcz1cIiR7Y2xhc3Nlcy5zcGxpdChcIi5cIikuam9pbihcIiBcIikudHJpbSgpfVwiYCA6IFwiXCJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhcHBseUVuZCh0ZW1wbGF0ZTogSVRlbXBsYXRlU3RvcmUpIHtcclxuICAgIGlmICh0aGlzLmVuZCkge1xyXG4gICAgICB0ZW1wbGF0ZS5jb250ZW50ICs9IHRoaXMuZW5kO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXBwbHlTdGFydCh0ZW1wbGF0ZTogSVRlbXBsYXRlU3RvcmUpIHtcclxuICAgIGlmICh0aGlzLnN0YXJ0KSB7XHJcbiAgICAgIHRlbXBsYXRlLmNvbnRlbnQgKz0gdGhpcy5zdGFydDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiJzcmMvcGx1Z2luIn0=
