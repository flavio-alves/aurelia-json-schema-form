export class Wrapper {
    constructor(key) {
        const matches = key.match(Wrapper.emmetRegex);
        if (this.validateMatches(matches, key)) {
            const attr = this.getEmmetAttr(matches[1], matches[2], matches[3]);
            this.start = `<${attr.element} ${attr.id} ${attr.classes}>`.replace(/\s+/, ' ').trim();
            this.end = this.isVoidElement(attr.element) ? '' : `</${attr.element}>`;
        }
    }
    static isContainer(key) {
        return key.charAt(0) === this.containerMarker;
    }
    isVoidElement(element) {
        return Wrapper.voidElements.indexOf(element) > -1;
    }
    validateMatches(matches, key) {
        if (!matches && Wrapper.isContainer(key)) {
            throw new Error(`the form key "${key}" does not match "^(@element)(#id)?((.class)+)?$"`);
        }
        return !!matches;
    }
    getEmmetAttr(element, id, classes) {
        return {
            element,
            id: id ? `id="${id}"` : '',
            classes: classes ? `class="${classes.split('.').join(' ').trim()}"` : ''
        };
    }
    applyEnd(template) {
        if (this.end) {
            template.content += this.end;
        }
    }
    applyStart(template) {
        if (this.start) {
            template.content += this.start;
        }
    }
}
Wrapper.containerMarker = '@';
Wrapper.emmetRegex = /^@([a-z-]+)(?:(?:(?:#(\w+))?)(?:((?:\.(?:[a-z\d-]+))+)?))$/;
Wrapper.voidElements = [
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr'
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc291cmNlcy93cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxPQUFPO0lBNkJsQixZQUFZLEdBQVc7UUFDckIsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2RixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDO1NBQ3pFO0lBQ0gsQ0FBQztJQWZELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVztRQUM1QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoRCxDQUFDO0lBZU8sYUFBYSxDQUFDLE9BQWU7UUFDbkMsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sZUFBZSxDQUFDLE9BQXlCLEVBQUUsR0FBVztRQUM1RCxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxtREFBbUQsQ0FBQyxDQUFDO1NBQzFGO1FBQ0QsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTyxZQUFZLENBQ2xCLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTztRQUVwQixPQUFPO1lBQ0wsT0FBTztZQUNQLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ3pFLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQXdCO1FBQy9CLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsUUFBd0I7UUFDakMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7QUFyRWUsdUJBQWUsR0FBRyxHQUFHLENBQUM7QUFFdEIsa0JBQVUsR0FBRyw0REFBNEQsQ0FBQztBQUUxRSxvQkFBWSxHQUFHO0lBQzdCLE1BQU07SUFDTixNQUFNO0lBQ04sSUFBSTtJQUNKLEtBQUs7SUFDTCxPQUFPO0lBQ1AsSUFBSTtJQUNKLEtBQUs7SUFDTCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxLQUFLO0NBQ04sQ0FBQyIsImZpbGUiOiJyZXNvdXJjZXMvd3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUZW1wbGF0ZVN0b3JlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90ZW1wbGF0ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgV3JhcHBlciB7XHJcbiAgc3RhdGljIHJlYWRvbmx5IGNvbnRhaW5lck1hcmtlciA9ICdAJztcclxuXHJcbiAgc3RhdGljIHJlYWRvbmx5IGVtbWV0UmVnZXggPSAvXkAoW2Etei1dKykoPzooPzooPzojKFxcdyspKT8pKD86KCg/OlxcLig/OlthLXpcXGQtXSspKSspPykpJC87XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSB2b2lkRWxlbWVudHMgPSBbXHJcbiAgICAnYXJlYScsXHJcbiAgICAnYmFzZScsXHJcbiAgICAnYnInLFxyXG4gICAgJ2NvbCcsXHJcbiAgICAnZW1iZWQnLFxyXG4gICAgJ2hyJyxcclxuICAgICdpbWcnLFxyXG4gICAgJ2lucHV0JyxcclxuICAgICdsaW5rJyxcclxuICAgICdtZXRhJyxcclxuICAgICdwYXJhbScsXHJcbiAgICAnc291cmNlJyxcclxuICAgICd0cmFjaycsXHJcbiAgICAnd2JyJ1xyXG4gIF07XHJcblxyXG4gIHN0YXRpYyBpc0NvbnRhaW5lcihrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGtleS5jaGFyQXQoMCkgPT09IHRoaXMuY29udGFpbmVyTWFya2VyO1xyXG4gIH1cclxuXHJcbiAgc3RhcnQ/OiBzdHJpbmc7XHJcbiAgZW5kPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZykge1xyXG4gICAgY29uc3QgbWF0Y2hlcyA9IGtleS5tYXRjaChXcmFwcGVyLmVtbWV0UmVnZXgpO1xyXG5cclxuICAgIGlmICh0aGlzLnZhbGlkYXRlTWF0Y2hlcyhtYXRjaGVzLCBrZXkpKSB7XHJcbiAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmdldEVtbWV0QXR0cihtYXRjaGVzWzFdLCBtYXRjaGVzWzJdLCBtYXRjaGVzWzNdKTtcclxuICAgICAgdGhpcy5zdGFydCA9IGA8JHthdHRyLmVsZW1lbnR9ICR7YXR0ci5pZH0gJHthdHRyLmNsYXNzZXN9PmAucmVwbGFjZSgvXFxzKy8sICcgJykudHJpbSgpO1xyXG4gICAgICB0aGlzLmVuZCA9IHRoaXMuaXNWb2lkRWxlbWVudChhdHRyLmVsZW1lbnQpID8gJycgOiBgPC8ke2F0dHIuZWxlbWVudH0+YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNWb2lkRWxlbWVudChlbGVtZW50OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBXcmFwcGVyLnZvaWRFbGVtZW50cy5pbmRleE9mKGVsZW1lbnQpID4gLTE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlTWF0Y2hlcyhtYXRjaGVzOiBSZWdFeHBNYXRjaEFycmF5LCBrZXk6IHN0cmluZykge1xyXG4gICAgaWYgKCFtYXRjaGVzICYmIFdyYXBwZXIuaXNDb250YWluZXIoa2V5KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoZSBmb3JtIGtleSBcIiR7a2V5fVwiIGRvZXMgbm90IG1hdGNoIFwiXihAZWxlbWVudCkoI2lkKT8oKC5jbGFzcykrKT8kXCJgKTtcclxuICAgIH1cclxuICAgIHJldHVybiAhIW1hdGNoZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEVtbWV0QXR0cihcclxuICAgIGVsZW1lbnQsIGlkLCBjbGFzc2VzXHJcbiAgKTogeyBlbGVtZW50OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNsYXNzZXM6IHN0cmluZyB9IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVsZW1lbnQsXHJcbiAgICAgIGlkOiBpZCA/IGBpZD1cIiR7aWR9XCJgIDogJycsXHJcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXMgPyBgY2xhc3M9XCIke2NsYXNzZXMuc3BsaXQoJy4nKS5qb2luKCcgJykudHJpbSgpfVwiYCA6ICcnXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXBwbHlFbmQodGVtcGxhdGU6IElUZW1wbGF0ZVN0b3JlKSB7XHJcbiAgICBpZiAodGhpcy5lbmQpIHtcclxuICAgICAgdGVtcGxhdGUuY29udGVudCArPSB0aGlzLmVuZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFwcGx5U3RhcnQodGVtcGxhdGU6IElUZW1wbGF0ZVN0b3JlKSB7XHJcbiAgICBpZiAodGhpcy5zdGFydCkge1xyXG4gICAgICB0ZW1wbGF0ZS5jb250ZW50ICs9IHRoaXMuc3RhcnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290Ijoic3JjL3BsdWdpbiJ9
