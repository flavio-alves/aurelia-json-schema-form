import { getLogger } from "aurelia-logging";
const overrideMarker = "$";
export function isOverride(key) {
    const val = key.charAt(0) === overrideMarker;
    getLogger("aurelia-json-schema-form")
        .info("isOverride", { key, val });
    return val;
}
export function setFormOverrides(form, parentSchema, formKey, schema) {
    getLogger("aurelia-json-schema-form")
        .info("setFormOverrides", { form, parentSchema, formKey, schema });
    schema.title = schema.title || (!!formKey ? fromCamelCase(formKey) : undefined);
    form.$schema = schema;
    if (form.$enum) {
        form.$schema.enum = form.$enum;
    }
    if (parentSchema && parentSchema.type === "object") {
        form.$required = form.$required || (parentSchema.required
            ? parentSchema.required.indexOf(formKey) > -1 : false);
    }
}
function fromCamelCase(val) {
    return val
        .replace(/([A-Z])/g, " $1")
        .replace(/^./, (str) => str.toUpperCase());
}
const templateModuleMarker = "_element";
export function isTemplateModule(key) {
    return key === templateModuleMarker;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVyZmFjZXMvZm9ybS1vdmVycmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUE4QjVDLE1BQU0sY0FBYyxHQUFXLEdBQUcsQ0FBQztBQUNuQyxNQUFNLFVBQVUsVUFBVSxDQUFDLEdBQVc7SUFDcEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxjQUFjLENBQUM7SUFFN0MsU0FBUyxDQUFDLDBCQUEwQixDQUFDO1NBQ2xDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLElBQW1CLEVBQUUsWUFBbUMsRUFBRSxPQUFlLEVBQUUsTUFBNkI7SUFFeEcsU0FBUyxDQUFDLDBCQUEwQixDQUFDO1NBQ2xDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN0QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ2hDO0lBRUQsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7WUFDdkQsQ0FBQyxDQUFFLFlBQTRDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0Y7QUFDSCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBVztJQUNoQyxPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztTQUMxQixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBbUJELE1BQU0sb0JBQW9CLEdBQVcsVUFBVSxDQUFDO0FBRWhELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXO0lBQzFDLE9BQU8sR0FBRyxLQUFLLG9CQUFvQixDQUFDO0FBQ3RDLENBQUMiLCJmaWxlIjoiaW50ZXJmYWNlcy9mb3JtLW92ZXJyaWRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBJSnNvblNjaGVtYURlZmluaXRpb24sXHJcbiAgSUpzb25TY2hlbWFPYmplY3REZWZpbml0aW9uXHJcbn0gZnJvbSBcIi4vanNvbi1zY2hlbWEtZGVmaW5pdGlvblwiO1xyXG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwiYXVyZWxpYS1sb2dnaW5nXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtT3ZlcnJpZGUge1xyXG4gIFtrZXk6IHN0cmluZ106IE9SVHlwZXM7XHJcbiAgX2VsZW1lbnQ/OiBJVGVtcGxhdGVFbGVtZW50W107XHJcbiAgJG5vVGl0bGU/OiBib29sZWFuO1xyXG4gICRhcnJheUl0ZW0/OiBJRm9ybU92ZXJyaWRlO1xyXG4gICRub0VtcHR5QXJyYXlJbml0aWFsaXphdGlvbj86IGJvb2xlYW47XHJcbiAgJG5vdFJlbW92YWJsZT86IGJvb2xlYW47XHJcbiAgJGFycmF5QXNUYWJzPzogYm9vbGVhbjtcclxuICAkdGFiVGl0bGU/OiBzdHJpbmc7XHJcbiAgJHBsYWNlaG9sZGVyPzogc3RyaW5nO1xyXG4gICRodG1sQ2xhc3M/OiBzdHJpbmc7XHJcbiAgJGFsdFRlbXBsYXRlPzogc3RyaW5nO1xyXG4gICRtaW5EYXRlPzogc3RyaW5nOyAvLyB5eXl5LU1NLWRkXHJcbiAgJG1heERhdGU/OiBzdHJpbmc7IC8vIHl5eXktTU0tZGRcclxuICAkc2NoZW1hPzogSUpzb25TY2hlbWFEZWZpbml0aW9uO1xyXG4gICRyZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgJG5vU2VwYXJhdG9yPzogYm9vbGVhbjtcclxuICAkc3RlcD86IG51bWJlcjsgLy8gcmFuZ2Ugc2xpZGVyIHN0ZXBzXHJcbiAgJHBhcmVudEZvcm0/OiBJRm9ybU92ZXJyaWRlO1xyXG4gICRlbnVtPzogYW55O1xyXG4gICRvbkNoYW5nZT86IE9SQ2hhbmdlQ2FsbGJhY2s7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT1JUeXBlcyA9XHJcbiAgSUZvcm1PdmVycmlkZVtdIHwgSUZvcm1PdmVycmlkZSB8IE9SUHJpbWl0aXZlIHwgSUpzb25TY2hlbWFEZWZpbml0aW9uIHwgSVRlbXBsYXRlRWxlbWVudFtdIHwgT1JDaGFuZ2VDYWxsYmFjaztcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBPUlByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT1JDaGFuZ2VDYWxsYmFjayA9IChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHZvaWQ7XHJcblxyXG5jb25zdCBvdmVycmlkZU1hcmtlcjogc3RyaW5nID0gXCIkXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc092ZXJyaWRlKGtleTogc3RyaW5nKSB7XHJcbiAgY29uc3QgdmFsID0ga2V5LmNoYXJBdCgwKSA9PT0gb3ZlcnJpZGVNYXJrZXI7XHJcblxyXG4gIGdldExvZ2dlcihcImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybVwiKVxyXG4gICAgLmluZm8oXCJpc092ZXJyaWRlXCIsIHsga2V5LCB2YWwgfSk7XHJcbiAgcmV0dXJuIHZhbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZvcm1PdmVycmlkZXMoXHJcbiAgZm9ybTogSUZvcm1PdmVycmlkZSwgcGFyZW50U2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb24sIGZvcm1LZXk6IHN0cmluZywgc2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb25cclxuKSB7XHJcbiAgZ2V0TG9nZ2VyKFwiYXVyZWxpYS1qc29uLXNjaGVtYS1mb3JtXCIpXHJcbiAgICAuaW5mbyhcInNldEZvcm1PdmVycmlkZXNcIiwgeyBmb3JtLCBwYXJlbnRTY2hlbWEsIGZvcm1LZXksIHNjaGVtYSB9KTtcclxuICBzY2hlbWEudGl0bGUgPSBzY2hlbWEudGl0bGUgfHwgKCEhZm9ybUtleSA/IGZyb21DYW1lbENhc2UoZm9ybUtleSkgOiB1bmRlZmluZWQpO1xyXG4gIGZvcm0uJHNjaGVtYSA9IHNjaGVtYTtcclxuICBpZiAoZm9ybS4kZW51bSkge1xyXG4gICAgZm9ybS4kc2NoZW1hLmVudW0gPSBmb3JtLiRlbnVtO1xyXG4gIH1cclxuXHJcbiAgaWYgKHBhcmVudFNjaGVtYSAmJiBwYXJlbnRTY2hlbWEudHlwZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgZm9ybS4kcmVxdWlyZWQgPSBmb3JtLiRyZXF1aXJlZCB8fCAocGFyZW50U2NoZW1hLnJlcXVpcmVkXHJcbiAgICAgID8gKHBhcmVudFNjaGVtYSBhcyBJSnNvblNjaGVtYU9iamVjdERlZmluaXRpb24pLnJlcXVpcmVkLmluZGV4T2YoZm9ybUtleSkgPiAtMSA6IGZhbHNlKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZyb21DYW1lbENhc2UodmFsOiBzdHJpbmcpIHtcclxuICByZXR1cm4gdmFsXHJcbiAgICAucmVwbGFjZSgvKFtBLVpdKS9nLCBcIiAkMVwiKVxyXG4gICAgLnJlcGxhY2UoL14uLywgKHN0cikgPT4gc3RyLnRvVXBwZXJDYXNlKCkpO1xyXG59XHJcblxyXG4vKiogVXNlZCB0byBkZWNsYXJlIGEgY29tcGxldGVseSBzZXBhcmF0ZSBtb2R1bGUgdGhhdCBkb2VzXHJcbiAqIG5vdCBwZXJmb3JtIHN0YW5kYXJkIHZhbGlkYXRpb24sIGltcGxlbWVudCB2aWV3L3ZpZXctbW9kZWwgaG93ZXZlciB5b3Ugd2FudC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRlbXBsYXRlRWxlbWVudCB7XHJcblxyXG4gIC8qKiBAcHJvcGVydHkgdGhlIGVsZW1lbnQgdG8gYXBwZW5kIHRvIHRlbXBsYXRlLCBtYWtlIHN1cmUgeW91IGhhdmUgYWRkZWQgaXQncyBtb2R1bGVOYW1lIHRvIGdsb2JhbFJlc291cmNlcyAqL1xyXG4gIGVsZW1lbnROYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKiB0aGUgc2NoZW1hJ3Mga2V5IHRvIHBhcnNlLCBiaW5kcyBmb3JtICh0by12aWV3KSBhbmQgbW9kZWwodHdvLXdheSkgdG8geW91ciBtb2R1bGVcclxuICAgKiBAcHJvcGVydHkgSWYgc2NoZW1hS2V5IGlzIHNwZWNpZmllZCwgeW91ciBtb2R1bGUgbXVzdCBoYXZlOlxyXG4gICAqICAgYmluZGFibGUgc2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb247XHJcbiAgICogICBiaW5kYWJsZSBtb2RlbDogYW55IG9yIG1vZGVsIHR5cGU7XHJcbiAgICogICBJZiBzY2hlbWFLZXkgaXMgb21taXR0ZWQsIG5vIGJpbmRpbmdzIGFyZSBtYWRlXHJcbiAgICovXHJcbiAgc2NoZW1hS2V5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCB0ZW1wbGF0ZU1vZHVsZU1hcmtlcjogc3RyaW5nID0gXCJfZWxlbWVudFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcGxhdGVNb2R1bGUoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICByZXR1cm4ga2V5ID09PSB0ZW1wbGF0ZU1vZHVsZU1hcmtlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6InNyYy9wbHVnaW4ifQ==
