import { getLogger } from 'aurelia-logging';
import { RulesFactory } from './rules/rules-factory';
import { PLATFORM } from 'aurelia-pal';
import { SchemaFormLogger } from './resources/logger';
import { SchemaFormConfiguration } from './services/schema-form-configuration';
import { PluginOptions } from './plugin-options';
export function configure(frameworkConfig, callback) {
    const logger = getLogger('aurelia-json-schema-form');
    logger.info('initializing aurelia-json-schema-form');
    // create defaults/apply user defined configuration
    const options = new PluginOptions();
    if (callback instanceof Function) {
        callback(options);
    }
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.container.get(RulesFactory).register();
    frameworkConfig.globalResources([
        PLATFORM.moduleName('./form/au-json-schema-form'),
        PLATFORM.moduleName('./value-converters/sf-number-value-converter'),
        PLATFORM.moduleName('./form/array/sf-array'),
        PLATFORM.moduleName('./form/object/sf-object'),
        PLATFORM.moduleName('./form/number/sf-number'),
        PLATFORM.moduleName('./form/text/sf-string'),
        PLATFORM.moduleName('./form/boolean/sf-boolean'),
        PLATFORM.moduleName('./templates/bootstrap4/bootstrap-tooltip')
    ]);
}
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel);
    frameworkConfig.container.registerInstance(SchemaFormLogger, logger);
    logger.info('registered logger');
}
function registerConfiguration(logger, options, frameworkConfig) {
    const configuration = new SchemaFormConfiguration(options.validationRenderer, options.templates, options.validationMessages);
    frameworkConfig.container.registerInstance(SchemaFormConfiguration, configuration);
    logger.info('registered configuration', configuration);
}
export * from './form/array/sf-array';
export * from './form/au-json-schema-form';
export * from './form/boolean/sf-boolean';
export * from './form/form-controller';
export * from './form/number/sf-number';
export * from './form/object/sf-object';
export * from './form/text/sf-string';
export * from './interfaces/form-override';
export * from './renderers/bootstrap-validation-renderer';
export * from './resources/guid';
export * from './resources/logger';
export * from './resources/wrapper';
export * from './rules/array-rules';
export * from './rules/boolean-rules';
export * from './rules/common-rules';
export * from './rules/number-rules';
export * from './rules/rules-factory';
export * from './rules/string-rules';
export * from './services/defaults-service';
export * from './services/form-instances';
export * from './services/form-service';
export * from './services/schema-form-configuration';
export * from './value-converters/sf-number-value-converter';
export * from './plugin-options';

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Y0FBYywyQ0FBMkMsQ0FBQztBQUMxRCxjQUFjLGtCQUFrQixDQUFDO0FBQ2pDLGNBQWMsb0JBQW9CLENBQUM7QUFDbkMsY0FBYyxxQkFBcUIsQ0FBQztBQUNwQyxjQUFjLHFCQUFxQixDQUFDO0FBQ3BDLGNBQWMsdUJBQXVCLENBQUM7QUFDdEMsY0FBYyxzQkFBc0IsQ0FBQztBQUNyQyxjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMsdUJBQXVCLENBQUM7QUFDdEMsY0FBYyxzQkFBc0IsQ0FBQztBQUNyQyxjQUFjLDZCQUE2QixDQUFDO0FBQzVDLGNBQWMsMkJBQTJCLENBQUM7QUFDMUMsY0FBYyx5QkFBeUIsQ0FBQztBQUN4QyxjQUFjLHNDQUFzQyxDQUFDO0FBQ3JELGNBQWMsOENBQThDLENBQUM7QUFDN0QsY0FBYyxrQkFBa0IsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24gfSBmcm9tICdhdXJlbGlhLWZyYW1ld29yayc7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuaW1wb3J0IHsgUnVsZXNGYWN0b3J5IH0gZnJvbSAnLi9ydWxlcy9ydWxlcy1mYWN0b3J5JztcbmltcG9ydCB7IFBMQVRGT1JNIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUxvZ2dlciB9IGZyb20gJy4vcmVzb3VyY2VzL2xvZ2dlcic7XG5pbXBvcnQgeyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vc2VydmljZXMvc2NoZW1hLWZvcm0tY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBQbHVnaW5PcHRpb25zIH0gZnJvbSAnLi9wbHVnaW4tb3B0aW9ucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmUoZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uLCBjYWxsYmFjaz86IChjb25maWc6IFBsdWdpbk9wdGlvbnMpID0+IHZvaWQpIHtcbiAgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdhdXJlbGlhLWpzb24tc2NoZW1hLWZvcm0nKTtcblxuICBsb2dnZXIuaW5mbygnaW5pdGlhbGl6aW5nIGF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybScpO1xuXG4gIC8vIGNyZWF0ZSBkZWZhdWx0cy9hcHBseSB1c2VyIGRlZmluZWQgY29uZmlndXJhdGlvblxuICBjb25zdCBvcHRpb25zID0gbmV3IFBsdWdpbk9wdGlvbnMoKTtcbiAgaWYgKGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICBjYWxsYmFjayhvcHRpb25zKTtcbiAgfVxuXG4gIHJlZ2lzdGVyTG9nZ2VyKGxvZ2dlciwgb3B0aW9ucywgZnJhbWV3b3JrQ29uZmlnKTtcblxuICByZWdpc3RlckNvbmZpZ3VyYXRpb24obG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuXG4gIChmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLmdldChSdWxlc0ZhY3RvcnkpIGFzIFJ1bGVzRmFjdG9yeSkucmVnaXN0ZXIoKTtcblxuICBmcmFtZXdvcmtDb25maWcuZ2xvYmFsUmVzb3VyY2VzKFtcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybScpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vdmFsdWUtY29udmVydGVycy9zZi1udW1iZXItdmFsdWUtY29udmVydGVyJyksXG5cbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vYXJyYXkvc2YtYXJyYXknKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKCcuL2Zvcm0vb2JqZWN0L3NmLW9iamVjdCcpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vZm9ybS9udW1iZXIvc2YtbnVtYmVyJyksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi9mb3JtL3RleHQvc2Ytc3RyaW5nJyksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZSgnLi9mb3JtL2Jvb2xlYW4vc2YtYm9vbGVhbicpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoJy4vdGVtcGxhdGVzL2Jvb3RzdHJhcDQvYm9vdHN0cmFwLXRvb2x0aXAnKVxuICBdKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJMb2dnZXIoXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogUGx1Z2luT3B0aW9ucyxcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXG4pIHtcbiAgbG9nZ2VyLnNldExldmVsKG9wdGlvbnMubG9nTGV2ZWwpO1xuXG4gIGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShTY2hlbWFGb3JtTG9nZ2VyLCBsb2dnZXIpO1xuXG4gIGxvZ2dlci5pbmZvKCdyZWdpc3RlcmVkIGxvZ2dlcicpO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckNvbmZpZ3VyYXRpb24oXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogUGx1Z2luT3B0aW9ucyxcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXG4pIHtcbiAgY29uc3QgY29uZmlndXJhdGlvbiA9IG5ldyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbihcbiAgICBvcHRpb25zLnZhbGlkYXRpb25SZW5kZXJlciwgb3B0aW9ucy50ZW1wbGF0ZXMsIG9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzKTtcblxuICBmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyYXRpb24pO1xuXG4gIGxvZ2dlci5pbmZvKCdyZWdpc3RlcmVkIGNvbmZpZ3VyYXRpb24nLCBjb25maWd1cmF0aW9uKTtcbn1cblxuZXhwb3J0ICogZnJvbSAnLi9mb3JtL2FycmF5L3NmLWFycmF5JztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS9hdS1qc29uLXNjaGVtYS1mb3JtJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybS9ib29sZWFuL3NmLWJvb2xlYW4nO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtL2Zvcm0tY29udHJvbGxlcic7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vbnVtYmVyL3NmLW51bWJlcic7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vb2JqZWN0L3NmLW9iamVjdCc7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm0vdGV4dC9zZi1zdHJpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL2Zvcm0taW5zdGFuY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL2Zvcm0tb3B0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvZm9ybS1vdmVycmlkZSc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvanNvbi1zY2hlbWEtZGVmaW5pdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMvcnVsZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL3RlbXBsYXRlJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJmYWNlcy90ZW1wbGF0ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2VzL3ZhbGlkYXRpb24tbWVzc2FnZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9yZW5kZXJlcnMvYm9vdHN0cmFwLXZhbGlkYXRpb24tcmVuZGVyZXInO1xuZXhwb3J0ICogZnJvbSAnLi9yZXNvdXJjZXMvZ3VpZCc7XG5leHBvcnQgKiBmcm9tICcuL3Jlc291cmNlcy9sb2dnZXInO1xuZXhwb3J0ICogZnJvbSAnLi9yZXNvdXJjZXMvd3JhcHBlcic7XG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL2FycmF5LXJ1bGVzJztcbmV4cG9ydCAqIGZyb20gJy4vcnVsZXMvYm9vbGVhbi1ydWxlcyc7XG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL2NvbW1vbi1ydWxlcyc7XG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL251bWJlci1ydWxlcyc7XG5leHBvcnQgKiBmcm9tICcuL3J1bGVzL3J1bGVzLWZhY3RvcnknO1xuZXhwb3J0ICogZnJvbSAnLi9ydWxlcy9zdHJpbmctcnVsZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy9kZWZhdWx0cy1zZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZXMvZm9ybS1pbnN0YW5jZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy9mb3JtLXNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy9zY2hlbWEtZm9ybS1jb25maWd1cmF0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsdWUtY29udmVydGVycy9zZi1udW1iZXItdmFsdWUtY29udmVydGVyJztcbmV4cG9ydCAqIGZyb20gJy4vcGx1Z2luLW9wdGlvbnMnO1xuIl0sInNvdXJjZVJvb3QiOiJzcmMvcGx1Z2luIn0=
